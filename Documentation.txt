# Introduction
Inix is is a small INI file handling library that will allow
reading, writing and storing of INI file information.

The way Inix stores the INI data is by using a custom structure called an IniStruct.
Inix comes with a lot of useful functions to handle IniStructs, and these functions
allow you to add, delete, modify and read sections and elements of a struct.
Both the IniStruct structure and the functions declaration, as well as a
few useful macros are defined in the header file.

Finally Inix will allow you to parse an INI file and store the data in an
IniStruct and write to an INI file using the IniStruct's data.

# List of functions
Functions may or may not fail. Some functions can fail due to a faulty parameter
(name too long, or the presence of forbidden characters), or other things in which
case it will return either 1 or NULL.

A name must be composed of only lowercase latin letters and numbers,
no special characters are allowed, including spaces.
When creating a section or an element, if the name of the section/element
already exists in the file/section, it will fail and return 1/NULL;

IniStruct *IniMake(char *name);   /* Returns a pointer to a new IniStruct */
void IniEnd(IniStruct *ini);      /* Frees the given IniStruct */
void IniClear(IniStruct *ini);    /* Resets the given IniStruct */

int   IniAddSect(IniStruct *ini, char *sect);                                  /* Adds a section to an IniStruct */
int   IniAddElem(IniStruct *ini, char *sect, char *key, char *value);          /* Adds an element to a given section */
int   IniDelSect(IniStruct *ini, char *sect);                                  /* Deletes a section from an IniStruct */
int   IniDelElem(IniStruct *ini, char *sect, char *key);                       /* Deletes an element from a given section */
int   IniModSect(IniStruct *ini, char *old, char *new);                        /* Modifies the name of a given section */
int   IniModElemValue(IniStruct *ini, char *sect, char *oldkey, char *newkey); /* Modifies the key of a given element in a given section */
int   IniModElemKey(IniStruct *ini, char *sect, char *oldkey, char *newkey);   /* Modifies the value of a given element in a given section */
char *IniReadElem(IniStruct *ini, char *sect, char *name);                     /* Returns the value of an element in a given section */

void IniListAll(IniStruct *ini);                /* List all elements and sections in a given IniStruct */
int  IniListSect(IniStruct *ini, char *sect);   /* List all elements of a given section */

int IniSeekSect(IniStruct *ini, char *sect);            /* Checks if a given section exists in a given IniStruct */
int IniSeekElem(IniStruct *ini, char *sect, char *key); /* Checks if a given key exists in a given section in a given IniStruct */

int   IniAddGlob(IniStruct *ini, char *key, char *val);	     /* Adds a global element */
int   IniDelGlob(IniStruct *ini, char *key);                 /* Deletes a global element */
int   IniModGlobKey(IniStruct *ini, char *old, char *new);   /* Modifies a global element's key */
int   IniModGlobValue(IniStruct *ini, char *key, char *val); /* Modifies a global element's value */
char *IniReadGlob(IniStruct *ini, char *key);                /* Returns the value of a global element */
int   IniListGlob(IniStruct *ini);                           /* Lists all elements of the global section */
int   IniSeekGlob(IniStruct *ini, char *key);                /* Returns 1 if the given element exists in the global section, otherwise 0 */

IniStruct *IniReadFile(char *pathname, char *structname); /* Reads the INI data from a file and returns a new IniStruct containing that data */
void IniWriteFile(IniStruct *ini, char *pathname);        /* Writes the content of an IniStruct into an INI file */

# Misc
Inix is a work in progress; it does handle errors and faulty INI syntax. To avoid undefined behavior, please follow these rules:
    * Only use lowercase latin letters and numbers when creating a section, a key, or a value.
    * Do not make a lines bigger than BUFFER_SIZE (default 200) digits, otherwise undefined behavior could occur.
    * Do not make 2 section with the same name in a file or 2 elements with the same key in the same section.

A few macros are available:
    * INIX_VERSION: the version of Inix
	* INIX_AUTHOR:  the author of Inix
	* INIX_LICENSE: the license of Inix.
